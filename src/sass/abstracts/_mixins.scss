@use "sass:map";
@use "sass:meta";

$breakpointsMin: (
  sm: 40em,
  //640px
  md: 48em,
  //768px
  lg: 64em,
  //1024px
  xl: 90em,
  //1440px
);

$breakpointsMax: (
  sm: 39.99875em,
  //639.98px
  md: 47.99875em,
  //767.98px
  lg: 63.99875em,
  //1023.98px
  xl: 89.99875em,
  //1439.98px
);

// Mixin para generar media queries y recibe como argumento sm, md etc.
@mixin breakpoint($breakpoint) {
  $breakpoint-value: map.get($breakpointsMin, $breakpoint);
  @if $breakpoint-value != null {
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else{
    @error "The breakpoint #{$breakpoint} is not defined in $breakpointsMin.";
  }
}

@mixin breakpoint-down($breakpoint) {
  $breakpoint-value: map.get($breakpointsMax, $breakpoint);
  @if $breakpoint-value != null {
    @media (max-width: $breakpoint-value) {
      @content;
    }
  }@else {
    @error "The breakpoint #{$breakpoint} is not defined in $breakpointsMax.";
  }
}

  // Mixins para Agregar Nuevos Tokens
  @mixin generate-css-variables($map, $prefix: "") {
    @each $key, $value in $map {
      @if meta.type-of($value) == "map" {
        // Llamada recursiva si el valor es un mapa anidado
        @include generate-css-variables($value, $prefix + $key + "-");
      } @else {
        // Genera la variable si es un valor plano
        --#{$prefix}#{$key}: #{$value};
      }
    }
  }
  
    

// Genera m√∫ltiples tonos derivados del color base.
@function color-scale($color, $steps: 10, $darken: true) {
  $colors: ();

  @for $i from 1 through $steps {
    @if $darken {
      $shade: darken($color, $i * 5%); // Oscurece en incrementos del 5%
    } @else {
      $shade: lighten($color, $i * 5%); // Aclara en incrementos del 5%
    }

    $colors: append($colors, $shade);
  }
  @return $colors;
}
